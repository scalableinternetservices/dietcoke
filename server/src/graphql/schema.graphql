# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  #subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  candidates: [Candidate!]!
  calculateWinner: Candidate
}

type Mutation {
  # Increases the vote count for the given candidate.
  increaseVoteCount(candidateId: Int, count: Int): Boolean!

  # Sets a user's candidateIds array.
  updateUserCandidateIds(candidateIds: [Int!]): Boolean!
}

# type Subscription {

# }

type User {
  id: Int!
  userType: UserType!
  email: String!
  name: String!

  # May not include every candidate.
  candidateIds: [Int!]!
}

type Candidate {
  id: Int!
  voteCount: Int!
  name: String!
}

enum UserType { ADMIN, USER }